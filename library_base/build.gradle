apply plugin: 'com.android.library'

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
            }
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.android.javaVersion
        targetCompatibility rootProject.ext.android.javaVersion
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (isBuildModule.toBoolean()) {
                buildConfigField "String", "appType", rootProject.ext.libconfig.appType
                buildConfigField "String", "baseUrl", rootProject.ext.libconfig.baseUrl
            } else {
                buildConfigField "String", "appType", rootProject.ext.appconfig.appType
                buildConfigField "String", "baseUrl", rootProject.ext.appconfig.baseUrl
            }

        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (isBuildModule.toBoolean()) {
                buildConfigField "String", "appType", rootProject.ext.libconfig.appType
                buildConfigField "String", "baseUrl", rootProject.ext.libconfig.baseUrl
            } else {
                buildConfigField "String", "appType", rootProject.ext.appconfig.appType
                buildConfigField "String", "baseUrl", rootProject.ext.appconfig.baseUrl
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除alone文件夹下所有调试文件
                    exclude 'src/main/alone/*'
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    dataBinding {
        enabled true
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //support
    api rootProject.ext.dependencies["design"]
    api rootProject.ext.dependencies["support-v4"]
    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["recyclerview-v7"]
    //Google AAC
    api rootProject.ext.dependencies["lifecycle-extensions"]
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]
    //================第三方库============
//    api rootProject.ext.dependencies["okhttp"]
    api rootProject.ext.dependencies["rxjava"]
    api rootProject.ext.dependencies["rxandroid"]
    //okhttp+retrofit
    api rootProject.ext.dependencies["logging-interceptor"]
    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["adapter-rxjava"]
    api rootProject.ext.dependencies["converter"]
    //glide图片加载库
    api (rootProject.ext.dependencies.glide){
        exclude group: 'com.android.support'
    }
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    //阿里路由框架
    api (rootProject.ext.dependencies["arouter-api"]){
        exclude group: 'com.android.support'
    }
    //组件中依赖阿里路由编译框架
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]

    api rootProject.ext.dependencies["greendao"]
    //Dialog
//    api 'com.afollestad.material-dialogs:core:2.0.3'
    api 'com.afollestad.material-dialogs:core:0.9.6.0'

    //依赖数据层
//    if (isBuildModule.toBoolean()) {
//        implementation project(':library_db')
//    }else{
//        api project(':FpcLibsProject:library_db')
//    }
//    implementation project(':library_db')
}
