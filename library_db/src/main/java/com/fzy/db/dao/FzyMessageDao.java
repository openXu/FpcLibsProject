package com.fzy.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fzy.db.bean.FzyMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FZY_MESSAGE".
*/
public class FzyMessageDao extends AbstractDao<FzyMessage, Long> {

    public static final String TABLENAME = "FZY_MESSAGE";

    /**
     * Properties of entity FzyMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageID = new Property(1, String.class, "MessageID", false, "MESSAGE_ID");
        public final static Property Title = new Property(2, String.class, "Title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "Content", false, "CONTENT");
        public final static Property MessageType = new Property(4, String.class, "MessageType", false, "MESSAGE_TYPE");
        public final static Property MessageTopic = new Property(5, String.class, "MessageTopic", false, "MESSAGE_TOPIC");
        public final static Property OperType = new Property(6, String.class, "OperType", false, "OPER_TYPE");
        public final static Property Extra = new Property(7, String.class, "Extra", false, "EXTRA");
        public final static Property FromUserAccount = new Property(8, String.class, "FromUserAccount", false, "FROM_USER_ACCOUNT");
        public final static Property ToUserAccount = new Property(9, String.class, "ToUserAccount", false, "TO_USER_ACCOUNT");
        public final static Property PublishDate = new Property(10, String.class, "PublishDate", false, "PUBLISH_DATE");
        public final static Property AppId = new Property(11, String.class, "AppId", false, "APP_ID");
        public final static Property ReadStatus = new Property(12, int.class, "ReadStatus", false, "READ_STATUS");
    }


    public FzyMessageDao(DaoConfig config) {
        super(config);
    }
    
    public FzyMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FZY_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: MessageID
                "\"TITLE\" TEXT," + // 2: Title
                "\"CONTENT\" TEXT," + // 3: Content
                "\"MESSAGE_TYPE\" TEXT," + // 4: MessageType
                "\"MESSAGE_TOPIC\" TEXT," + // 5: MessageTopic
                "\"OPER_TYPE\" TEXT," + // 6: OperType
                "\"EXTRA\" TEXT," + // 7: Extra
                "\"FROM_USER_ACCOUNT\" TEXT," + // 8: FromUserAccount
                "\"TO_USER_ACCOUNT\" TEXT," + // 9: ToUserAccount
                "\"PUBLISH_DATE\" TEXT," + // 10: PublishDate
                "\"APP_ID\" TEXT," + // 11: AppId
                "\"READ_STATUS\" INTEGER NOT NULL );"); // 12: ReadStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FZY_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FzyMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MessageID = entity.getMessageID();
        if (MessageID != null) {
            stmt.bindString(2, MessageID);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(4, Content);
        }
 
        String MessageType = entity.getMessageType();
        if (MessageType != null) {
            stmt.bindString(5, MessageType);
        }
 
        String MessageTopic = entity.getMessageTopic();
        if (MessageTopic != null) {
            stmt.bindString(6, MessageTopic);
        }
 
        String OperType = entity.getOperType();
        if (OperType != null) {
            stmt.bindString(7, OperType);
        }
 
        String Extra = entity.getExtra();
        if (Extra != null) {
            stmt.bindString(8, Extra);
        }
 
        String FromUserAccount = entity.getFromUserAccount();
        if (FromUserAccount != null) {
            stmt.bindString(9, FromUserAccount);
        }
 
        String ToUserAccount = entity.getToUserAccount();
        if (ToUserAccount != null) {
            stmt.bindString(10, ToUserAccount);
        }
 
        String PublishDate = entity.getPublishDate();
        if (PublishDate != null) {
            stmt.bindString(11, PublishDate);
        }
 
        String AppId = entity.getAppId();
        if (AppId != null) {
            stmt.bindString(12, AppId);
        }
        stmt.bindLong(13, entity.getReadStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FzyMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MessageID = entity.getMessageID();
        if (MessageID != null) {
            stmt.bindString(2, MessageID);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(4, Content);
        }
 
        String MessageType = entity.getMessageType();
        if (MessageType != null) {
            stmt.bindString(5, MessageType);
        }
 
        String MessageTopic = entity.getMessageTopic();
        if (MessageTopic != null) {
            stmt.bindString(6, MessageTopic);
        }
 
        String OperType = entity.getOperType();
        if (OperType != null) {
            stmt.bindString(7, OperType);
        }
 
        String Extra = entity.getExtra();
        if (Extra != null) {
            stmt.bindString(8, Extra);
        }
 
        String FromUserAccount = entity.getFromUserAccount();
        if (FromUserAccount != null) {
            stmt.bindString(9, FromUserAccount);
        }
 
        String ToUserAccount = entity.getToUserAccount();
        if (ToUserAccount != null) {
            stmt.bindString(10, ToUserAccount);
        }
 
        String PublishDate = entity.getPublishDate();
        if (PublishDate != null) {
            stmt.bindString(11, PublishDate);
        }
 
        String AppId = entity.getAppId();
        if (AppId != null) {
            stmt.bindString(12, AppId);
        }
        stmt.bindLong(13, entity.getReadStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FzyMessage readEntity(Cursor cursor, int offset) {
        FzyMessage entity = new FzyMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MessageID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MessageType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MessageTopic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // OperType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Extra
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FromUserAccount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ToUserAccount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PublishDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // AppId
            cursor.getInt(offset + 12) // ReadStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FzyMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessageTopic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOperType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExtra(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFromUserAccount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setToUserAccount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPublishDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAppId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReadStatus(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FzyMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FzyMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FzyMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
